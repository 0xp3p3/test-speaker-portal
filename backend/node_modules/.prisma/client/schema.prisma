generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  bio       String?
  photo     String?
  expertise String[]
  role      Role     @default(SPEAKER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  eventsAsOrganizer Event[]            @relation("EventOrganizer")
  eventRSVPs        EventRSVP[]
  sentMessages      Message[]          @relation("MessageSender")
  receivedMessages  Message[]          @relation("MessageReceiver")
  conversations     ConversationUser[]
  notifications     Notification[]

  @@map("users")
}

model Event {
  id            String      @id @default(cuid())
  title         String
  description   String
  date          DateTime
  time          String
  zoomLink      String?
  zoomMeetingId String?
  organizerId   String
  maxAttendees  Int?
  isPublic      Boolean     @default(true)
  status        EventStatus @default(SCHEDULED)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  organizer User            @relation("EventOrganizer", fields: [organizerId], references: [id])
  rsvps     EventRSVP[]
  attendees EventAttendee[]

  @@map("events")
}

model EventRSVP {
  id        String     @id @default(cuid())
  eventId   String
  userId    String
  status    RSVPStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_rsvps")
}

model EventAttendee {
  id        String   @id @default(cuid())
  eventId   String
  email     String
  name      String
  attended  Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, email])
  @@map("event_attendees")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  participants ConversationUser[]
  messages     Message[]

  @@map("conversations")
}

model ConversationUser {
  id             String    @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime  @default(now())
  lastReadAt     DateTime?

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_users")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String?
  content        String
  messageType    MessageType @default(TEXT)
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User?        @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@map("messages")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Role {
  SPEAKER
  ORGANIZER
  ADMIN
}

enum EventStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum RSVPStatus {
  PENDING
  YES
  NO
  MAYBE
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum NotificationType {
  EVENT_REMINDER
  EVENT_INVITATION
  MESSAGE_RECEIVED
  RSVP_UPDATE
  EVENT_CANCELLED
  SYSTEM
}
